@namespace Oqtane.ChatHubs

@inherits ModuleBase

@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject HttpClient http
@inject ISettingService SettingService

<table class="table table-sm form-group">
    <tr>
        <td>
            <label for="Setting" class="control-label">Maximum Username Characters: </label>
        </td>
        <td>
            <input type="text" class="form-control" @bind="maxUserNameCharacters" />
        </td>
    </tr>
</table>

<table class="table table-sm">
    <thead>
        <tr>
            <th>
                Regular Expression
            </th>
            <th>
                Action
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in regularExpressions)
        {
            <tr>
                <td>
                    <small>@item</small>
                </td>
                <td>
                    <button type="button" class="btn btn-link" @onclick="@(async() => await RemoveRegularExpression_ClickedAsync(item))">Remove</button>
                </td>
            </tr>
        }
        <tr>
            <td>
                <div class="form-group">
                    <input type="text" class="form-control" @bind="regularExpression" placeholder="Type your regular expression.." />
                    <small class="form-text text-muted">Try this regex for youtube links: <br />(?:http?s?:\/\/)?(?:www.)?(?:m.)?(?:music.)?youtu(?:\.?be)(?:\.com)?(?:(?:\w*.?:\/\/)?\w*.?\w*-?.?\w*\/(?:embed|e|v|watch|.*\/)?\??(?:feature=\w*\.?\w*)?&?(?:v=)?\/?)([\w\d_-]{11})(?:\S+)?</small>
                </div>
            </td>
            <td>
                <button type="button" class="btn btn-link" @onclick="@(async() => await AddRegularExpression_ClickedAsync())">Add</button>
            </td>
        </tr>
    </tbody>
</table>

@code {

    public string maxUserNameCharacters;
    public string regularExpression;
    public List<string> regularExpressions = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);

            maxUserNameCharacters = SettingService.GetSetting(settings, "MaxUserNameCharacters", "20");
            regularExpressions = SettingService.GetSetting(settings, "RegularExpression", "").Split(";delimiter;", StringSplitOptions.RemoveEmptyEntries).ToList();
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);

            SettingService.SetSetting(settings, "MaxUserNameCharacters", maxUserNameCharacters);
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);

            SettingService.SetSetting(settings, "RegularExpression", string.Join(";delimiter;", regularExpressions));
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task AddRegularExpression_ClickedAsync()
    {
        try
        {
            this.regularExpressions.Add(regularExpression);
            this.regularExpression = string.Empty;
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task RemoveRegularExpression_ClickedAsync(string item)
    {
        try
        {
            this.regularExpressions.Remove(item);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

}