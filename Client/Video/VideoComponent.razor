@namespace Oqtane.ChatHubs

@using System
@using Oqtane.ChatHubs.Services
@using Oqtane.Shared.Models
@using BlazorAlerts

<style type="text/css">

    .video-item-@ChatHubRoom.Id {
        line-height: 14px;
    }

    .video-item-@ChatHubRoom.Id .video-item-devices {
        display: none;
    }

    .video-item-@ChatHubRoom.Id:hover .video-item-devices {
        display: block;
    }

    .video-item-resize-container-@ChatHubRoom.Id {
        width: 240px;
        height: 180px;
        resize: both;
        overflow: hidden;
        background-color: @VideoItemBackgroundColor;
    }

    .video-item-resize-container:hover .video-ellipsis {
        display: initial;
    }

    .video-item-ellipsis {
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        z-index: 1;
        display: initial;
    }

    .background-gradient-blue {
        background-image: linear-gradient(to bottom, rgba(255,255,255,1), rgba(49,94,182,1));
    }

    .background-gradient-red {
        background-image: linear-gradient(to bottom, rgba(255,255,255,1), rgba(182,94,49,1));
    }

</style>

<div class="bd-highlight video-item-@ChatHubRoom.Id p-1">

    @if (ChatHubService.ConnectedUser.UserId == ChatHubRoom.CreatorId)
    {
        <div>
            <div class="video-item-resize-container-@ChatHubRoom.Id position-relative">

                <div class="align-items-center justify-content-center px-3 h-100 @(!ChatHubService.LocalStreamTasks.Any(item => item.Key == ChatHubRoom.Id) ? "d-flex" : "d-none")">
                    <button class="btn btn-lg btn-link text-white bg-dark p-sm-2" type="button" @onclick="async () => ChatHubService.StartVideoChat(ChatHubRoom.Id)">
                        ▷ @ChatHubRoom.Title
                    </button>
                </div>

                <div class="w-100 h-100 @(!ChatHubService.LocalStreamTasks.Any(item => item.Key == ChatHubRoom.Id) ? "d-none" : "d-block")">
                    <div class="text-white px-2 py-2 mb-0 position-absolute video-item-ellipsis">
                        <small>[loc.] @ChatHubRoom.Title</small>
                    </div>
                    <video id="chathubs-video-local-@ChatHubRoom.Id" class="chathubs-video-local mb-0 w-100 h-100" controls></video>
                    <canvas id="chathubs-canvas-local-@ChatHubRoom.Id" class="chathubs-canvas-local bg-light d-none"></canvas>

                    <div class="position-absolute video-item-devices" style="right: 0px; top: 0px;">
                        <div class="input-group" style="padding: 0.25rem 0.25rem 0.125rem 0.25rem">
                            <select id="chathubs-audio-source-local-@ChatHubRoom.Id" class="custom-select custom-select-sm" style="width: 120px !important;"></select>
                        </div>
                        <div class="input-group" style="padding: 0.125rem 0.25rem 0.25rem 0.25rem">
                            <select id="chathubs-video-source-local-@ChatHubRoom.Id" class="custom-select custom-select-sm" style="width: 120px !important;"></select>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    }
    else
    {
        <div>
            <div class="video-item-resize-container-@ChatHubRoom.Id position-relative">

                <div class="align-items-center justify-content-center px-3 h-100 @(!ChatHubService.RemoteStreamTasks.Any(item => item == ChatHubRoom.Id) ? "d-flex" : "d-none")">
                    <button class="btn btn-lg btn-link text-white bg-dark p-sm-2" type="button" @onclick="async () => ChatHubService.StartVideoChat(ChatHubRoom.Id)">
                        ▷ @ChatHubRoom.Title
                    </button>
                </div>

                <div class="w-100 h-100 @(!ChatHubService.RemoteStreamTasks.Any(item => item == ChatHubRoom.Id) ? "d-none" : "d-block")">
                    <div class="text-white px-2 py-2 mb-0 position-absolute video-item-ellipsis">
                        <small>[rem.] @ChatHubRoom.Title</small>
                    </div>
                    <video id="chathubs-video-remote-@ChatHubRoom.Id" class="chathubs-video-remote mb-0 w-100 h-100" controls></video>
                    <canvas id="chathubs-canvas-remote-@ChatHubRoom.Id" class="chathubs-canvas-remote bg-light d-none"></canvas>
                </div>

            </div>
        </div>
    }

</div>

@code {

    [Inject] public IChatHubService ChatHubService { get; set; }
    [Inject] public VideoService VideoService { get; set; }
    [Inject] public BlazorAlertsService BlazorAlertsService { get; set; }

    [Parameter] public ChatHubRoom ChatHubRoom { get; set; }
    [Parameter] public int ItemIndex { get; set; }

    /*
    private Dictionary<Guid, string[]> _color_sets { get; set; } = new Dictionary<Guid, string[]>()
    {
        { Guid.NewGuid(), new string[] { "LightBlue", "LightGreen", "LightSeaGreen", "LightPink", "LightPink", "LightGray", "Plum", "Silver", "Tan", "Thistle", "Salmon", "Orchid" } },
        { Guid.NewGuid(), new string[] { "SlateBlue", "Gold", "IndianRed", "SeaGreen", "Peru", "Sienna", "Teal", "YellowGreen", "MidnightBlue", "CadetBlue", "BurlyWood", "PowderBlue", "FireBrick", "Chocolate", "GoldenRod" } },
    };
    */

    private string _videoItemBackgroundColor { get; set; }
    protected string VideoItemBackgroundColor
    {
        get => this._videoItemBackgroundColor;
        set => this._videoItemBackgroundColor = value;
    }

    protected override void OnInitialized()
    {
        /*
        double elementAt = Convert.ToDouble(DateTime.UtcNow.Millisecond) / 999 * Convert.ToDouble((this._color_sets.Keys.Count - 1));
        double elementAtRounded = Math.Round(elementAt, 0, MidpointRounding.ToEven);
        KeyValuePair<Guid, string[]> colorset = this._color_sets.ElementAt(Convert.ToInt32(elementAtRounded));
        this.VideoItemBackgroundColor = colorset.Value[new Random().Next(0, colorset.Value.Length - 1)];
        */

        this._videoItemBackgroundColor = this.ChatHubRoom.BackgroundColor;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender) {

            this.VideoService.ContinueLivestreamTask(ChatHubRoom.Id);
        }

        base.OnAfterRender(firstRender);
    }

}
